import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'java'
	id 'java-library'
	id 'idea'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.openapi.generator' version '7.7.0'
	id 'jacoco'
}

group = 'com.diverger'
version = '1.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

configurations {		//Tenia una dependencia duplicada, dos proveedores de log service
	all*.exclude module: 'spring-boot-starter-logging'
	all*.exclude module: 'slf4j-simple'
}

configurations {
	openapi
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '3.3.2'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
	implementation group: 'io.swagger.parser.v3', name: 'swagger-parser-v3', version: '2.1.19'
	implementation group: 'io.swagger.core.v3', name: 'swagger-core-jakarta', version: '2.2.19'
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.12'
	implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.6'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.1.3'
	implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
	implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.3'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: '2.22.1'
	implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.12'
	compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
	testImplementation 'org.projectlombok:lombok:1.18.32'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation group: 'io.github.resilience4j', name: 'resilience4j-retry', version: '2.2.0'
	implementation group: 'io.github.resilience4j', name: 'resilience4j-circuitbreaker', version: '2.2.0'

}


openApiGenerate {
	generatorName.set("spring")
	library = 'spring-boot'
	generateAliasAsModel = true
	generateApiDocumentation = true
	generateApiTests = false
	generateModelTests = false

	globalProperties = [
			"openApiNullable"                  : "true",
			"interfaceOnly"                    : "true",
			"useTags"                          : "true",
			"useSpringController"              : "true",
			"useSpringfox"                     : "true",
			"useBeanValidation"                : "false",
			"performBeanValidation"            : "false",
			"delegatePattern"                  : "false",
			"useOptional"                      : "false",
			"sortModelPropertiesByRequiredFlag": "true",
			"sortParamsByRequiredFlag"         : "true",
			"supportingFiles"        			: "false"
	]

	tasks.register('StarWarsServiceAPI', GenerateTask) {
		inputSpec.set("$projectDir/src/main/resources/OpenAPI/api-starwars-service.yml")
		outputDir = "$projectDir/build/generated/openapi/starwars"

		generatorName.set("spring")
		library = 'spring-boot'
		generateAliasAsModel = true
		generateApiDocumentation = true
		generateApiTests = false
		apiPackage.set('com.diverger.starwars.infrastructure.port.in')
		modelPackage.set('com.diverger.starwars.infrastructure.adapter.in.dto')
		configOptions.set([
				skipDefaultInterface: "true",
				interfaceOnly       : "true",
				useTags             : "true"
		])

		doFirst {
			delete "$projectDir/src/main/java/com/diverger/starwars/infrastructure/port/in/"
		}

		doLast{
			copy {
				from "$projectDir/build/generated/openapi/starwars/src/main/java/com/diverger/starwars/infrastructure/port/in/"
				into "$projectDir/src/main/java/com/diverger/starwars/infrastructure/port/in/"
				include '**/*'
				exclude 'ApiUtil.java'
			}
		}
	}

	tasks.register('StarWarsServiceModel', GenerateTask) {
		inputSpec.set("$projectDir/src/main/resources/OpenAPI/model-starwars-service.yml")
		outputDir = "$projectDir/build/generated/openapi/starwars"

		generatorName.set("spring")
		library = 'spring-boot'
		generateAliasAsModel = true
		generateApiDocumentation = true
		generateApiTests = false
		modelPackage.set('com.diverger.starwars.infrastructure.adapter.in.dto')
		configOptions.set([
				documentationProvider: "none",
				skipDefaultInterface: "true",
				interfaceOnly       : "true",
				useTags             : "true"
		])

		doFirst {
			delete "$projectDir/src/main/java/com/diverger/starwars/infrastructure/adapter/in/dto/"
		}

		doLast{
			copy {
				from "$projectDir/build/generated/openapi/starwars/src/main/java/com/diverger/starwars/infrastructure/adapter/in/dto/"
				into "$projectDir/src/main/java/com/diverger/starwars/infrastructure/adapter/in/dto/"
				include '**/*'
			}
		}
	}

	tasks.register('Swapi-dev-models', GenerateTask) {
		inputSpec.set("$projectDir/src/main/resources/swapi-dev-openapi/swapi-dev-models.yml")
		outputDir = "$projectDir/build/generated/swapi-dev/models"

		generatorName.set("spring")
		library = 'spring-boot'
		generateAliasAsModel = true
		generateApiDocumentation = true
		generateApiTests = false
		modelPackage.set('com.diverger.starwars.domain')
		configOptions.set([
				documentationProvider: "none",
				skipDefaultInterface: "true",
				interfaceOnly       : "true",
				useTags             : "true"
		])

		doFirst {
			delete "$projectDir/src/main/java/com/diverger/starwars/domain"
		}

		doLast{
			copy {
				from "$projectDir/build/generated/swapi-dev/models/src/main/java/com/diverger/starwars/domain"
				into "$projectDir/src/main/java/com/diverger/starwars/domain"
				include '**/*'
			}
		}
	}

}

tasks.named('test') {
	useJUnitPlatform()
}

if (!project.hasProperty('noapibuild')) {
	tasks.compileJava.dependsOn([
			"StarWarsServiceAPI",
			"StarWarsServiceModel",
			"Swapi-dev-models"
	])
}


tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}


tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootJar') {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.named('jar') {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ["**/apimodel/**", "org/openapitools/api**", "com/lgt/aixigo/api**"])
		})
	}

}