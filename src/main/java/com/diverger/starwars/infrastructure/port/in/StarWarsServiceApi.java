/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.diverger.starwars.infrastructure.port.in;

import com.diverger.starwars.infrastructure.adapter.in.dto.ErrorResponse;
import com.diverger.starwars.infrastructure.adapter.in.dto.StarWarsPersonInformation;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-03T22:52:34.472419200+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "StarWarsService", description = "the StarWarsService API")
public interface StarWarsServiceApi {

    /**
     * GET /swapi-proxy/person-info : Obtain information about the person in star wars universe.
     * Get the information about the person given the name
     *
     * @param name Search string for the person&#39;s name (required)
     * @return The position of a portfolio, including all their assets and LGT sustainability rating. (status code 200)
     *         or Bad request (status code 400)
     *         or Person not found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error response (status code 200)
     */
    @Operation(
        operationId = "getPersonInformation",
        summary = "Obtain information about the person in star wars universe.",
        description = "Get the information about the person given the name",
        tags = { "StarWarsService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The position of a portfolio, including all their assets and LGT sustainability rating.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StarWarsPersonInformation.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Person not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/swapi-proxy/person-info",
        produces = { "application/json" }
    )
    
    ResponseEntity<StarWarsPersonInformation> getPersonInformation(
        @NotNull @Parameter(name = "name", description = "Search string for the person's name", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name
    );

}
